let g:rps_init=1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" My paths and files.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rps_cscope_out="cscope.out"
let g:rps_cscope_prg="cscope -u -b -R -f " . g:rps_cscope_out . ""
let g:rps_tags_file="tags"
let g:rps_ctags_prg="ctags -R -f" . g:rps_tags_file . ""
let g:rps_gtags_prg="gtags -i"
execute 'set tags=' . g:rps_tags_file . ''
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" My functions.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
source $HOME/.vim/.vimrc_func
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" My own variables.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search masks.
let g:rps_sm1 = '*.c *.h *.s *.S *.asm *.asmh *.mak *make* *.ld *.cfg *.txt *.bat *.sh *.inc *.cmake *.doxyc'
let g:rps_sm2 = '**/*.c **/*.h **/*.s **/*.S **/*.asm **/*.asmh **/*.mak **/*make* **/*ld **/*.cfg **/*.txt **/*.bat  **/*.sh **/*.inc **/*.cmake **/*.doxyc'
let g:rps_sm3 = '.c,.h,.asm,.s,.S,.asmh,.mak,.ld,.cfg,.txt,.bat,.sh,.inc,.def,.pl,.cmake,.doxyc'
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" File types.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Markdown.
au BufRead,BufNewFile *.md set filetype=markdown
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Indent options.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Code aspect options.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Reflect current coding rules.
set cindent
set autoindent
set smartindent

syntax on
filetype on
filetype plugin on
filetype indent on
set number
set fileformats=unix,dos
set foldcolumn=3

call StyleDefault()

" Toggle between spell/nospell.
map <Leader><Leader>p :call ToggleSpell()<CR>
" Toggle between tabs and spaces.
map <Leader><Leader>t :call ToggleTabSpace()<CR>
" Switch to a specific style.
map <Leader><Leader>d :call StyleDefault()<CR>
map <Leader><Leader>b :call StyleBtoc()<CR>
map <Leader><Leader>k :call StyleKernel()<CR>
map <Leader><Leader>w :call StyleWidgets()<CR>
map <Leader><Leader>u :call StyleUtk()<CR>

set diffopt=filler,vertical
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim only shortcuts.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""
" Tag browsing.
""""""""""""""""""""""""""""""""""""""""""""""""""
map <Space><Space> <C-]>
map <Space>, <C-t>
map <C-p> <C-t>
map <leader>] <C-]>
map <leader>[ <C-t>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Buffer navigation.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Go to buffer n.
nnoremap ,1 :1b<CR>
nnoremap ,2 :2b<CR>
nnoremap ,3 :3b<CR>
nnoremap ,4 :4b<CR>
nnoremap ,5 :5b<CR>
nnoremap ,6 :6b<CR>
nnoremap ,7 :7b<CR>
nnoremap ,8 :8b<CR>
nnoremap ,9 :9b<CR>
nnoremap ,0 :10b<CR>
" Go to next/previous buffer.
nnoremap ,s :bnext<CR>
nnoremap ,a :bprevious<CR>
" Delete buffer.
nnoremap ,x <C-w>o:bdelete<CR>
" Switch between current and alternate buffers.
map <leader>, :e #<cr>
map <leader>1 :e #<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Window navigation.
""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <Space><Up>    <C-w>k
nmap <Space><Down>  <C-w>j
nmap <Space><Left>  <C-w>h
nmap <Space><Right> <C-w>l
nmap <Leader><Up>    <C-w>k
nmap <Leader><Down>  <C-w>j
nmap <Leader><Left>  <C-w>h
nmap <Leader><Right> <C-w>l
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Search & Replace stuff.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Search behavior.
set hlsearch
nmap <leader>n :silent :nohlsearch<CR>
set incsearch

" Search using visual selected block.
vmap / y/<C-R>"<CR>

" Substitute (search and replace) shortcuts.
noremap ;; :%s:::gci<Left><Left><Left><Left><Left>
noremap ,, :%s:::gcI<Left><Left><Left><Left><Left>
noremap ,. :,$s:::gcI<Left><Left><Left><Left><Left>

" Quick vimgrep.
noremap <Leader>f :execute "vimgrep! //gj " . g:rps_sm2 . " " <Bar> :bo cw<Home><C-Right><C-Right><Right><Right>
noremap <Leader><Leader>f :execute "vimgrep! /" . expand("<cword>") . "/gj " . g:rps_sm2 . " " <Bar> :bo cw<CR>

" Quick grep.
"""set grepprg=ack
"""noremap <Leader>s :execute "grep! \"\" --noheading --nocolor --flush --asm --batch --cc --cpp --make --type-add cc=" . g:rps_sm3 . " " <Bar> :bo cw<Home><C-Right><C-Right><C-Right><Left><Left>
"""noremap <Leader><Leader>s :execute ":silent grep! \"" . expand("<cword>") . "\" -w --noheading --nocolor --flush --asm --batch --cc --cpp --make --type-add cc=" . g:rps_sm3 . " " <Bar> :bo cw<CR><C-L>
set grepprg=ag
noremap <Leader>s :execute "grep! \"\" -i -p ~/.agignore --line-numbers --nobreak --noheading --nocolor --nogroup --hidden" <Bar> :bo cw<Home><C-Right><C-Right><C-Right><Left><Left>
noremap <Leader><Leader>s :execute ":silent grep! \"" . expand("<cword>") . "\" -ws -p ~/.agignore --line-numbers --nobreak --noheading --nocolor --nogroup --hidden" <Bar> :bo cw<CR><C-L>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Quickfix window.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Open.
map <Leader>q :bo copen<CR>
" Close.
map <Leader>w :cclose<CR>
" Move to next item in quickfix list.
map <Leader>3 :bo cwindow<CR>:cn<CR>
" Move to previous item in quickfix list.
map <Leader>2 :bo cwindow<CR>:cp<CR>
" Show next quickfix window in stack.
map <Leader>p :bo copen<CR>:cnewer<CR>
" Show previous quickfix window in stack.
map <Leader>o :bo copen<CR>:colder<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Save, session, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Describes what is saved in a VIM session.
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize
" Save session in current dir.
noremap <F9> :mksession! session.vim<CR>
" Save current buffer.
"""nmap <Leader><Space> :w!<CR>
"""imap <Leader><Space> <Esc>:w!<CR><Esc>a
" Safe exit.
noremap <F10> <C-w>o:mksession! session.vim <bar> qa<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Checks
""""""""""""""""""""""""""""""""""""""""""""""""""
" checkpatch
map <Leader><Leader>cl :call CheckpatchLinux()<CR><CR><C-L>
" checkpatch_btoc
map <Leader><Leader>cb :call CheckpatchBtoc()<CR><CR><C-L>
" checkpatch_btoc
map <Leader><Leader>cc :call CheckpatchLinuxOutOfTree()<CR><CR><C-L>
" cppcheck
map <Leader><Leader>cp :call Cppcheck()<CR><CR><C-L>
" clang --analyze
map <Leader><Leader>cf :call ClangCheck()<CR><CR><C-L>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Emulate cut, copy, paste...
map <C-c> "py
map ,l viw"py
noremap <C-z> <C-v>
map <C-v> "pgP
"""map ,p viw"pgP
map ,p viw"py<F4>
map ,º viw"pgP
map ,ç  viw"pgP
map ,; viw"pgP
map <C-x> "px
imap <C-v> <C-R>p

" Using xclip to access X clipboards.
" Grab the clipboard and yank it.
map <F6> :call setreg("\"", system("xclip -o -selection primary"))<CR>
" Grab the clipboard, yank it put it.
nmap <F7> :call setreg("\"", system("xclip -o -selection primary"))<CR>p
" Grab the clipboard, yank it put it.
imap <F7> <Esc>:call setreg("\"", system("xclip -o -selection primary"))<CR>pa
" Grab current visual selection and place it in clipboard.
vmap <F5> y:call system("xclip -i -selection primary", getreg("\""))<CR>:call system("xclip -i", getreg("\""))<CR>
" Grab last yank and place it in clipboard.
map <F4> :call system("xclip -i -selection primary", getreg("\""))<CR>:call system("xclip -i", getreg("\""))<CR>

" Other settings.
set nobackup
set hidden
set history=1000
runtime macros/matchit.vim
set ignorecase
set smartcase
set scrolloff=3
set nowrapscan
set nowrap
set sidescroll=1
set guioptions+=bh
set formatoptions+=t
set textwidth=80
set colorcolumn=+1
set selectmode=mouse
au GUIEnter * simalt ~x
set encoding=utf-8

set wildmenu
set wildmode=full
" Do not put 'tags' file(s) in wildignore, it breaks FuzzyFinder for Tags!
set wildignore+=session.vim,cscope.out,GPATH,GRTAGS,GTAGS
set wildignore+=.hg,.git,.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl
set wildignore+=*.sw?
set wildignore+=*.DS_Store
set wildignore+=*.luac
set wildignore+=migrations
set wildignore+=*.pyc
set wildignore+=*.orig
set wildignore+=classes
set wildignore+=lib

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10
"""set ttimeout
"""set ttimeoutlen=5
"""set timeout
"""set timeoutlen=500

" Place swap files in own directory.
set directory=~/.vim-swap
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins settings.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: ctags.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Tag update.
command! -nargs=0 MyTagsCmd :execute ":silent !" . g:rps_ctags_prg . " &"
map <F11> :MyTagsCmd<cr><C-L>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: Minibuffer explorer.
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
hi MBEChanged guibg=red ctermbg=red
hi MBEVisibleNormal guibg=lightyellow ctermbg=yellow
hi MBEVisibleChanged guibg=magenta ctermbg=125
autocmd CursorHold,CursorHoldI * UMiniBufExplorer

" Toggle> minubuffer explorer.
noremap <F3> :TMiniBufExplorer<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: Nerdtree.
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeWinPos = 'right'

" Toggle: nerdtree.
noremap <F2> :NERDTreeToggle<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: fuzzyfinder.
""""""""""""""""""""""""""""""""""""""""""""""""""
let g:fuf_keyPrevPattern = '<C-a>'
let g:fuf_keyNextPattern = '<C-s>'

" Shortcuts: fuzzyfinder_textmate.
map ;f :FufFile **/<CR>
map ,f :FufFile! **/<CR>
map ;b :FufBuffer<CR>
map ,b :FufBuffer!<CR>
map ;t :FufTag<CR>
map ,t :FufTag!<CR>
map _t :FufBufferTag<CR>
"""map -t :FufBufferTag!<CR>
map ,<Space> :FufBufferTag!<CR>
nnoremap <leader>t :FufTagWithCursorWord!<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: taglist.
""""""""""""""""""""""""""""""""""""""""""""""""""
set updatetime=2000
set title titlestring=%<%f\ %([%{Tlist_Get_Tagname_By_Line()}]%)
set title titlestring=%<%f\ %h%m%r\ %([%{Tlist_Get_Tagname_By_Line()}]%)%=%-14.([%l\ of\ %L,%c]%)\ %-10.([%P]%)
let Tlist_Auto_Update = 1
let Tlist_Ctags_Cmd = g:rps_ctags_prg
let Tlist_Process_File_Always = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Sort_Type = "name"

" Toggle: taglist.
noremap <F1> :TlistToggle<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: Gutentags.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Start with disabled for avoiding tags creation on vim sessions for non source code.
let g:gutentags_enabled = 0
" Useful for debugging and checking plugin.
"""let g:gutentags_trace = 1
" Use RAM for tags.
let g:gutentags_cache_dir = "/dev/shm/rps/vim-cache/gutentags"
" Use cwd (sampled when vim was started) as the gutentags_project_root indicator.
let g:gutentags_cwd_as_project_root = 1

map <Leader><F11> :call gutentags#toggle_enabled()<cr>
map <Leader><Leader><F11> :call gutentags#toggle_cwd_as_project_root()<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: cscope.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Manage cscope generation/update.
command! -nargs=0 MyScopeCmd :execute ":silent !" . g:rps_cscope_prg . " &"
map <F12> :MyScopeCmd<cr><C-L>
" Manage cscope connections.
map <Leader><F12> :execute ":cs kill " . g:rps_cscope_out . "" <CR>
map <Leader><Leader><F12> :execute ":cs add " . g:rps_cscope_out . "" <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
" CSCOPE settings for vim
""""""""""""""""""""""""""""""""""""""""""""""""""
" This tests to see if vim was configured with the '--enable-cscope' option
" when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " define cscope program
    let &cscopeprg=g:rps_cscope_prg

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=1

    " force the results to go to quickfix window
    set cscopequickfix=s-,g-,d-,c-,t-,e-,f-,i-

    " add any cscope database in current directory
    if filereadable(g:rps_cscope_out)
        execute ":cs add " . g:rps_cscope_out
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   'd'   called: find functions that function under cursor calls
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.
    "

    nmap <Leader>as :cs find s <C-R>=expand("<cword>")<CR>
    nmap <Leader>ag :cs find g <C-R>=expand("<cword>")<CR>
    nmap <Leader>ac :cs find c <C-R>=expand("<cword>")<CR>
    nmap <Leader>at :cs find t <C-R>=expand("<cword>")<CR>
    nmap <Leader>ae :cs find e <C-R>=expand("<cword>")<CR>
    nmap <Leader>af :cs find f <C-R>=expand("<cfile>")<CR>
    nmap <Leader>ai :cs find i ^<C-R>=expand("<cfile>")<CR>$
    nmap <Leader>ad :cs find d <C-R>=expand("<cword>")<CR>

    nmap <Leader><Leader>as :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>ag :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>ac :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>at :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>ae :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>af :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <Leader><Leader>ai :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <Leader><Leader>ad :cs find d <C-R>=expand("<cword>")<CR><CR>


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

    nmap <Leader>zs :vert scs find s <C-R>=expand("<cword>")<CR>
    nmap <Leader>zg :vert scs find g <C-R>=expand("<cword>")<CR>
    nmap <Leader>zc :vert scs find c <C-R>=expand("<cword>")<CR>
    nmap <Leader>zt :vert scs find t <C-R>=expand("<cword>")<CR>
    nmap <Leader>ze :vert scs find e <C-R>=expand("<cword>")<CR>
    nmap <Leader>zf :vert scs find f <C-R>=expand("<cfile>")<CR>
    nmap <Leader>zi :vert scs find i ^<C-R>=expand("<cfile>")<CR>$
    nmap <Leader>zd :vert scs find d <C-R>=expand("<cword>")<CR>

    nmap <Leader><Leader>zs :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>zg :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>zc :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>zt :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>ze :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>zf :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <Leader><Leader>zi :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <Leader><Leader>zd :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <Leader>xs :scs find s <C-R>=expand("<cword>")<CR>
    nmap <Leader>xg :scs find g <C-R>=expand("<cword>")<CR>
    nmap <Leader>xc :scs find c <C-R>=expand("<cword>")<CR>
    nmap <Leader>xt :scs find t <C-R>=expand("<cword>")<CR>
    nmap <Leader>xe :scs find e <C-R>=expand("<cword>")<CR>
    nmap <Leader>xf :scs find f <C-R>=expand("<cfile>")<CR>
    nmap <Leader>xi :scs find i ^<C-R>=expand("<cfile>")<CR>$
    nmap <Leader>xd :scs find d <C-R>=expand("<cword>")<CR>

    nmap <Leader><Leader>xs :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>xg :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>xc :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>xt :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>xe :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <Leader><Leader>xf :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <Leader><Leader>xi :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <Leader><Leader>xd :scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: unite.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Unite source menus.
let g:unite_source_menu_menus = {}
" Unite source menus: Favorite commands.
let g:unite_source_menu_menus.favorite_commands = {
        \   'description'       : 'favorite_commands',
        \ }
let g:unite_source_menu_menus.favorite_commands.candidates = {
        \   'mru'               : 'Unite file_mru -default-action=tabdrop',
        \   'mru_directory'     : 'Unite directory_mru -default-action=narrow',
        \   'tab'               : 'Unite tab -default-action=narrow',
        \   'bookmark'          : 'Unite bookmark -default-action=narrow',
        \   'file_rec'          : 'Unite file_rec -default-action=right',
        \   'mru + file_rec'    : 'Unite file_mru file_rec -default-action=right',
        \   'locate'            : 'Unite locate -default-action=right',
        \   'buffer_tab'        : 'Unite buffer_tab -default-action=goto',
        \   'buffer'            : 'Unite buffer -default-action=goto',
        \   'yank'              : 'Unite history/yank -default-action=yank -no-quit',
        \   'grep'              : 'Unite grep -default-action=open -no-quit',
        \   'line'              : 'Unite line/fast -default-action=open -auto-preview',
        \   'quickfixlist'      : 'Unite quickfix -default-action=open -wrap -max-multi-lines=2 -no-quit',
        \   'change'            : 'Unite change -default-action=open -auto-preview',
        \   'tags'              : 'Unite tag -default-action=preview -auto-preview',
        \   'gundo'             : 'GundoShow',
        \   'NeoSnippet'        : 'NeoSnippetEdit -vertical -split',
        \   'CurrentDir'        : 'RangerChooser',
        \ }

function g:unite_source_menu_menus.favorite_commands.map(key, value)
    return {
        \   'word'              : a:key,
        \   'kind'              : 'command',
        \   'action__command'   : a:value,
        \ }
endfunction

" Customize some settings.
let g:unite_ignore_source_files = ['tags',]
let g:unite_data_directory = "/dev/shm/rps/vim-cache/unite"
let g:unite_enable_start_insert = 1
let g:unite_source_history_yank_enable = 1
let g:unite_source_file_rec_max_cache_files = 0
call unite#custom#source('file_mru,file_rec,file_rec/async,buffers,grepocate','max_candidates', 0)
let g:unite_prompt = "> "
let g:unite_source_grep_command="ag"
let g:unite_source_grep_default_opts = "-p ~/.agignore -s --line-numbers --nocolor --nogroup --hidden"
let g:unite_source_grep_recursive_opt = ""
let g:unite_source_rec_async_command = ['ag', '-p', '~/.agignore', '--nocolor', '--nogroup', '-g', '']

" Customize unite buffer keys.
function! s:unite_settings()
    nmap <buffer> <c-c> <plug>(unite_exit)
    nmap <buffer> qq    <plug>(unite_exit)
    nmap <buffer> xx    <plug>(unite_exit)
    imap <buffer> qq    <plug>(unite_insert_leave)
    imap <buffer> <c-c> <plug>(unite_exit)
    imap <buffer> xx    <plug>(unite_exit)
    "imap <buffer> <TAB>   <Plug>(unite_select_next_line)
    "imap <buffer><expr> x
    "            \ unite#smart_map('x', "\<Plug>(unite_quick_match_default_action)")
    "nmap <buffer> x     <Plug>(unite_quick_match_default_action)
endfunction
autocmd FileType unite call s:unite_settings()

" Search register and put text in insert mode.
"""inoremap <expr> <C-z> unite#start_complete('register', { 'input' : unite#get_cur_text() })
"""inoremap <expr> <C-z> unite#start_complete('register')

" Let the space key be the unite leader.
nmap <space> [unite]
nnoremap [unite] <nop>

" Just unite.
nnoremap [unite]n   :Unite<cr>

" Buffers.
nnoremap [unite]b   :Unite -auto-resize -buffer-name=buffers buffer<cr>
nnoremap [unite]mb  :UniteWithCursorWord -auto-resize -buffer-name=buffers buffer<cr>
nnoremap [unite]B   :Unite -resume -auto-resize -buffer-name=buffers buffer<cr>
" Files.
nnoremap [unite]f   :Unite -auto-resize -buffer-name=files file_rec<cr>
nnoremap [unite]mf  :UniteWithCursorWord -auto-resize -buffer-name=files file_rec<cr>
nnoremap [unite]F   :Unite -resume -auto-resize -buffer-name=files file_rec<cr>
" Tags.
nnoremap [unite]t   :Unite -auto-resize -auto-preview -buffer-name=tags tag<cr>
nnoremap [unite]mt  :UniteWithCursorWord -auto-resize -auto-preview -buffer-name=tags tag<cr>
nnoremap [unite]T   :Unite -resume -auto-resize -auto-preview -buffer-name=tags tag<cr>
" Global/Gtags.
" Generate/Update gtags.
nnoremap [unite]gg  :execute ":silent !" . g:rps_gtags_prg . " &"<cr><c-l>
nnoremap [unite]gh  :Unite -auto-resize -auto-preview -buffer-name=gtags_compl gtags/completion<CR>

nnoremap [unite]gt  :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_def gtags/def<CR>
nnoremap [unite]gT  :Unite -no-split -resume -auto-resize -auto-preview -buffer-name=gtags_def gtags/def<CR>
nnoremap [unite]gd  :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_def gtags/def:
nnoremap [unite]gD  :Unite -no-split -resume -auto-resize -auto-preview -buffer-name=gtags_def gtags/def<CR>
nnoremap [unite]mgt :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_def gtags/def:
vnoremap [unite]gt  <ESC>:execute "Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_def gtags/def:".GetVisualSelection()<CR>

nnoremap [unite]gc  :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_ctx gtags/context<CR>
nnoremap [unite]gC  :Unite -no-split -resume -auto-resize -auto-preview -buffer-name=gtags_ctx gtags/context<CR>
nnoremap [unite]mgc :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_ctx gtags/context:

nnoremap [unite]gr  :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_ref gtags/ref<CR>
nnoremap [unite]gR  :Unite -no-split -resume -auto-resize -auto-preview -buffer-name=gtags_ref gtags/ref<CR>
nnoremap [unite]mgr :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_ref gtags/ref:

nnoremap [unite]gf  :Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_grep gtags/grep<CR>
nnoremap [unite]mgf :execute "Unite -no-split -auto-resize -auto-preview -buffer-name=gtags_grep gtags/grep:".expand('<cword>')<CR>
nnoremap [unite]gF  :Unite -no-split -resume -auto-resize -auto-preview -buffer-name=gtags_grep gtags/grep<CR>
" MRU.
nnoremap [unite]uf  :Unite -auto-resize -buffer-name=mru_f file_mru<cr>
nnoremap [unite]muf :UniteWithCursorWord -auto-resize -buffer-name=mru_f file_mru<cr>
nnoremap [unite]uF  :Unite -resume -auto-resize -buffer-name=mru_f file_mru<cr>

nnoremap [unite]ud  :Unite -auto-resize -buffer-name=mru_d directory_mru<cr>
nnoremap [unite]mud :UniteWithCursorWord -auto-resize -buffer-name=mru_d directory_mru<cr>
nnoremap [unite]uD  :Unite -resume -auto-resize -buffer-name=mru_d directory_mru<cr>
" Yanks.
nnoremap [unite]y   :Unite -auto-resize -buffer-name=yanks history/yank<cr>
nnoremap [unite]my  :UniteWithCursorWord -auto-resize -buffer-name=yanks history/yank<cr>
nnoremap [unite]Y   :Unite -resume -auto-resize -buffer-name=yanks history/yank<cr>
" Registers.
nnoremap [unite]r   :Unite -auto-resize -buffer-name=regs register<cr>
nnoremap [unite]mr  :UniteWithCursorWord -auto-resize -buffer-name=regs register<cr>
nnoremap [unite]R   :Unite -resume -auto-resize -buffer-name=regs register<cr>
" Lines.
nnoremap [unite]l   :Unite -auto-resize -auto-preview -buffer-name=lines line<cr>
nnoremap [unite]ml  :UniteWithCursorWord -auto-resize -auto-preview -buffer-name=lines line<cr>
nnoremap [unite]L   :Unite -resume -auto-resize -auto-preview -buffer-name=lines line<cr>
" Bookmarks.
nnoremap [unite]'   :Unite -auto-resize -buffer-name=line bookmark<cr>
nnoremap [unite]"   :UniteBookmarkAdd<cr>
" Grep.
nnoremap [unite]/   :Unite -auto-resize -auto-preview -buffer-name=search grep:**:-i<cr>
nnoremap [unite]m/  :execute "Unite -auto-resize -auto-preview -buffer-name=search grep:**:-w:".expand('<cword>')<cr>
nnoremap [unite]x/  :execute "Unite -auto-resize -auto-preview -buffer-name=search grep:**:-wi:".expand('<cword>')<cr>
nnoremap [unite]?   :Unite -resume -auto-resize -auto-preview -buffer-name=search grep<cr>
" Outline.
nnoremap [unite]o   :Unite -auto-resize -auto-preview -buffer-name=outline outline<cr>
nnoremap [unite]mo  :UniteWithCursorWord -auto-resize -buffer-name=outline outline<cr>
nnoremap [unite]O   :Unite -resume -auto-resize -auto-preview -buffer-name=outline outline<cr>
" Commands.
nnoremap [unite]c   :Unite -auto-resize -buffer-name=commands command<cr>
nnoremap [unite]mc  :UniteWithCursorWord -auto-resize -buffer-name=commands command<cr>
nnoremap [unite]C   :Unite -resume -auto-resize -buffer-name=commands command<cr>
" Outputs.
nnoremap [unite]xo  :Unite -auto-resize -buffer-name=outputs output<cr>
nnoremap [unite]xmo :UniteWithCursorWord -auto-resize -buffer-name=outputs output<cr>
nnoremap [unite]xO  :Unite -resume -auto-resize -buffer-name=outputs output<cr>
" Sources.
nnoremap [unite]s   :Unite -auto-resize -buffer-name=sources source<cr>
nnoremap [unite]ms  :UniteWithCursorWord -auto-resize -buffer-name=sources source<cr>
nnoremap [unite]S   :Unite -resume -auto-resize -buffer-name=sources source<cr>

" Favorite commands.
nnoremap [unite]a   :Unite menu:favorite_commands<cr>
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: fugitive.
""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <Leader>gs :Gstatus<cr>
nnoremap <Leader>gd :Gvdiff<cr>
nnoremap <Leader>gr :Gread<cr>
nnoremap <Leader>gw :Gwrite<cr>
nnoremap <Leader>gb :Gblame<cr>
nnoremap <Leader>gcc :Gcommit<cr>
nnoremap <Leader>gca :Gcommit --amend<cr>
nnoremap <Leader>gcs :Gcommit -s<cr>
nnoremap <Leader>gcr :Gcommit -s --amend<cr>

nnoremap <Leader>ge :Gedit
nnoremap <Leader><Leader>ge :Gedit <cr>
nnoremap <Leader>gp :Gsplit
nnoremap <Leader>gm :Gmerge
nnoremap <Leader>gco :Git checkout
nnoremap <Leader>gl :execute ":silent Glog " <bar> :redraw! <bar> :bo copen<Home><C-Right><C-Right><C-Right><Right>
nnoremap <Leader><Leader>gl :execute ":silent Glog " <bar> :redraw! <bar> :bo copen<cr>
nnoremap <Leader>gg :execute ":silent Ggrep '' " <bar> :redraw! <bar> :bo copen<Home><C-Right><C-Right><C-Right><Right><Right>

nnoremap <Leader>grr oexec GIT_EDITOR="git rbrui" git commit --amend<ESC>0
nnoremap <Leader>gar oexec GIT_EDITOR="git abrui" git commit --amend<ESC>0
nnoremap <Leader>gra oexec GIT_EDITOR="git rband" git commit --amend<ESC>0
nnoremap <Leader>gaa oexec GIT_EDITOR="git aband" git commit --amend<ESC>0
nnoremap <Leader>grs oexec GIT_EDITOR="git rbser" git commit --amend<ESC>0
nnoremap <Leader>gas oexec GIT_EDITOR="git abser" git commit --amend<ESC>0

augroup ft_fugitive
    au!
    autocmd BufReadPost fugitive://* set bufhidden=delete
    au BufNewFile,BufRead .git/index setlocal nolist
    autocmd BufWritePost * call fugitive#reload_status()
    autocmd User Fugitive
        \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
        \   nnoremap <buffer> <Leader>1 :edit %:h<CR> |
        \ endif
    autocmd BufReadPost fugitive://*
        \ if fugitive#buffer().type() =~# '^\%(commit\)$' |
        \   setlocal foldlevel=99 |
        \ endif
augroup END
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugin: vimagit.
""""""""""""""""""""""""""""""""""""""""""""""""""
" Change default mappings
" Open Magit status buffer.
nnoremap <Leader>mm :Magit<cr>

" Open/Close folds.
"""let g:magit_folding_open_mapping='o'
"""let g:magit_folding_close_mapping='c'
" Stage/Unstage file, hunk, etc.
"""let g:magit_stage_hunk_mapping='s'
" Stage/Unstage file.
"""let g:magit_stage_file_mapping='f'
" Commit.
"""let g:magit_commit_mapping='cc'
" Ammend commit.
"""let g:magit_commit_mapping='ca'
" Commit fixup.
"""let g:magit_commit_fixup_mapping='cf'
" Refresh.
"""let g:magit_reload_mapping='r'

" Misc settings.
" Disable help when showing magit status buffer.
let g:magit_show_help=0
" Fold all changes by default.
let g:magit_default_show_all_files=0
" Warn when showing a diff larger than the defined number of lines.
let g:magit_warning_max_lines=1000
""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" GUI/Terminal options.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has('gui_running')
  set guifont=Courier_New:h10

  "colorscheme desertEx

  " dark
  "colorscheme Dark
  "colorscheme DarkDefault
  "colorscheme DimGrey
  "colorscheme desert
  "colorscheme neon
  "colorscheme night
  "colorscheme sea
  colorscheme rps
  "colorscheme xoria256

  " light
  "colorscheme default
  "colorscheme tolerable
  "colorscheme vc
else
  if &term == "linux"
    let xterm16_brightness='default'
    let xterm16_colormap='standard'
    colorscheme xterm16
  else
    colorscheme rps_term_256
  endif
endif
set guioptions-=T

set statusline=%<%f\ %h%m%r\ %([%{Tlist_Get_Tagname_By_Line()}]%)\ %([%{fugitive#statusline()}]%)%=%-14.([%l\ of\ %L,%c]%)\ %-10.([%P]%)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:rps_init=0
